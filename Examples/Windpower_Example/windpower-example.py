
'''
This example script shows basic steps for working with the Windpower module. See
the readme for details.

Created with PySAM 4.2.0 in Python 3.8.7. Last tested with PySAM 4.2.0 with
code generated by SAM 2022.11.21 r1 SSC 279.

Most recently tested with PySAM 6.0.0

'''

import json
from pathlib import Path

import PySAM.Windpower as wp

# create a new windpower model
wind = wp.new()

# set path for working directory
working_dir = str(Path(__file__).parent)

# set model inputs from JSON generated by SAM
with open(working_dir + '/windpower-inputs.json', 'r') as file:
    sam_data = json.load(file)
    # loop through each key-value pair
    for k, v in sam_data.items():
        if k != 'number_inputs':
            wind.value(k, v)

## replace some inputs as needed for this analysis ##

# load a wind resource file
wind.value(	'wind_resource_filename', working_dir + '/wind-resource-file.csv')

# wind shear is location-specific to adjust wind speed data to turbine hub height
wind.value('wind_resource_shear', 0.14)

# load wind turbine parameters from JSON
with open( working_dir + '/wind-turbines.json', 'r') as file:
    turbine_data = json.load(file)

#### example 1 ####

# set up wind farm for one turbine
wind.value('wind_farm_xCoordinates', [ 0 ])
wind.value('wind_farm_yCoordinates', [ 0 ])

# loop through turbine list for single turbine
print('Single Turbine')
print('--------------')
for turbine in turbine_data:
    # set wind turbine parameters
    wind.value('wind_turbine_rotor_diameter', turbine['rotor_diameter'])
    wind.value('wind_turbine_powercurve_windspeeds', turbine['wind_speeds'])
    wind.value('wind_turbine_powercurve_powerout',  turbine['turbine_powers'])
    wind.value('wind_turbine_hub_ht', turbine['hub_height'])
    
    # set wind farm capacity
    number_of_turbines = len(wind.value('wind_farm_xCoordinates'))
    farm_capacity =  number_of_turbines * turbine['rated_power']
    wind.value('system_capacity', farm_capacity)
    
    # run simulation
    wind.execute()

    # print results
    print(turbine['name'])
    print('annual energy (kWh) = ', wind.Outputs.annual_energy)
    print('capacity factor = ', wind.Outputs.capacity_factor)
    print()

#### example 2 ####

# set up turbine locations for wind farm with two turbines, see SAM Wind Farm input page for diagram
wind.value('wind_farm_xCoordinates', [ 0, 600 ])
wind.value('wind_farm_yCoordinates', [ 0, 0 ])

# loop through turbine list for two turbines
print('Two Turbines')
print('------------')
for turbine in turbine_data:
    # set wind turbine parameters
    wind.value('wind_turbine_rotor_diameter', turbine['rotor_diameter'])
    wind.value('wind_turbine_powercurve_windspeeds', turbine['wind_speeds'])
    wind.value('wind_turbine_powercurve_powerout',  turbine['turbine_powers'])
    wind.value('wind_turbine_hub_ht', turbine['hub_height'])

    # set wind farm capacity
    number_of_turbines = len(wind.value('wind_farm_xCoordinates'))
    farm_capacity =  number_of_turbines * turbine['rated_power']
    wind.value('system_capacity', farm_capacity)

    # run simulation
    wind.execute()

    # print results
    print(turbine['name'])
    print('annual energy (kWh) = ', wind.Outputs.annual_energy)
    print('capacity factor = ', wind.Outputs.capacity_factor)
    print()